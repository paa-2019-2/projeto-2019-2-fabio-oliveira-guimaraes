(bubblesort
 (bubbling_TCC1 0
  (bubbling_TCC1-1 nil 3638806625
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_TCC2 0
  (bubbling_TCC2-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (case "null?(l!1)")
      (("1" (hide -2 2) (("1" (grind) nil nil)) nil)
       ("2" (case "null?(cdr(l!1))")
        (("1" (hide -2 3) (("1" (grind) nil nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_TCC3 0
  (bubbling_TCC3-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (case "null?(l!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(l!1))")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_TCC4 0
  (bubbling_TCC4-1 nil 3638806625 ("" (termination-tcc) nil nil) nil
   nil))
 (bubbling_TCC5 0
  (bubbling_TCC5-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (case "null?(l!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(l!1))")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_TCC6 0
  (bubbling_TCC6-1 nil 3638806625 ("" (termination-tcc) nil nil) nil
   nil))
 (bubbling_preserves_length 0
  (bubbling_preserves_length-1 nil 3638809301
   ("" (measure-induct "length(l)" ("l"))
    (("" (skeep)
      (("" (skeep)
        (("" (typepred n)
          (("" (expand bubbling 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand length 1 1)
                  (("1"
                    (case "length(x) = length(cons(car(x), cdr(cdr(x)))) + 1")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (inst -4 "cons(car(x), cdr(cdr(x)))")
                          (("1" (assert)
                            (("1" (inst -4 "n -1") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand length 1 1)
                      (("2" (assert)
                        (("2" (hide -3)
                          (("2" (grind)
                            (("2" (expand length 1 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand length 2 1)
                  (("2" (expand length 2 2)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide -3) (("1" (grind) nil nil))
                              nil)
                             ("2" (inst -2 "cdr(x)")
                              (("2"
                                (prop)
                                (("1" (inst -1 "n - 1") nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubbling_preserves_suffix_TCC1 0
  (bubbling_preserves_suffix_TCC1-1 nil 3638806625
   ("" (subtype-tcc) (("" (rewrite bubbling_preserves_length) nil nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_preserves_suffix_TCC2 0
  (bubbling_preserves_suffix_TCC2-1 nil 3638806625
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bubbling_preserves_suffix 0
  (bubbling_preserves_suffix-1 nil 3638806633
   ("" (measure-induct+ "length(l)" ("l"))
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand bubbling 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand nth 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (expand nth 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (case "i = 1")
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2"
                              (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                              (("2"
                                (inst -2 "n - 1")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "i - 1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand nth -1 2)
                                        (("1"
                                          (expand nth 3 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide -1 4)
                                      (("2"
                                        (typepred i)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand length -1)
                                            (("2"
                                              (grind)
                                              (("2"
                                                (expand length -1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (expand length 1)
                                      (("2"
                                        (grind)
                                        (("1"
                                          (typepred n)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (expand length 1 2)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (typepred i)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand nth 2 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (expand nth 2 2)
                      (("2" (inst? -1)
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (prop) (("1" (assert) nil nil)) nil)
                             ("2" (typepred i)
                              (("2"
                                (hide 3 2)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand length -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand length 1 2)
                            (("2" (grind)
                              (("2"
                                (typepred n)
                                (("2"
                                  (hide 2 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred i)
        (("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (skeep)
      (("3" (typepred i)
        (("3" (hide-all-but (-1 1))
          (("3" (lemma "bubbling_preserves_length")
            (("3" (inst? -1) (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred i)
        (("4" (hide 2 -2) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (skeep)
      (("5" (typepred i)
        (("5" (lemma "bubbling_preserves_length")
          (("5" (inst? -1)
            (("5" (hide 2 -4) (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (x!1 skolem-const-decl "list[nat]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (> const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_TCC1 0
  (bubblesort_aux_TCC1-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (lemma bubbling_preserves_length)
      (("" (inst?)
        (("" (replace -1) (("" (hide -1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubblesort_aux_TCC2 0
  (bubblesort_aux_TCC2-1 nil 3638806625 ("" (termination-tcc) nil nil)
   nil nil))
 (bubblesort_aux_preserves_length 0
  (bubblesort_aux_preserves_length-1 nil 3639083378
   ("" (measure-induct+ n (l n)) (("" (postpone) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (bubbling def-decl "list[nat]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preserves_length formula-decl nil bubblesort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_TCC1 0
  (bubblesort_TCC1-1 nil 3638806625
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_preseves_contents 0
  (bubbling_preseves_contents-1 nil 3639002259
   ("" (measure-induct+ "n" ("l" "n")) (("" (postpone) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_of_perm_is_permutation formula-decl nil sorting nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (elim_list def-decl "list[nat]" sorting nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons_elim_is_permutation formula-decl nil sorting nil)
    (permutations_is_transitive formula-decl nil sorting nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (permutations const-decl "bool" sorting nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubbling_preserves_prefix_TCC1 0
  (bubbling_preserves_prefix_TCC1-1 nil 3639146808
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bubbling_preserves_prefix_TCC2 0
  (bubbling_preserves_prefix_TCC2-1 nil 3639146808
   ("" (subtype-tcc)
    (("" (rewrite bubbling_preserves_length) (("" (grind) nil nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (bubbling_preserves_prefix 0
  (bubbling_preserves_prefix-1 nil 3639175728
   ("" (measure-induct+ n (l n))
    (("1" (skeep)
      (("1" (typepred x!2)
        (("1" (case "x!2 = 0")
          (("1" (replace -1)
            (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil)
           ("2" (case "i=0")
            (("1" (replace -1)
              (("1" (expand nth 2 1)
                (("1" (expand bubbling 2)
                  (("1" (assert)
                    (("1" (case "NOT  car(x!1) > car(cdr(x!1))")
                      (("1" (assert)
                        (("1" (inst 3 0) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -4)
                          (("1" (inst -4 0)
                            (("1" (prop)
                              (("1"
                                (expand nth -1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand nth 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1)
                            (("2" (grind)
                              (("2"
                                (expand length -2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (expand length -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -3 3)
                        (("3" (grind)
                          (("3" (expand length -2)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide -3 3) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand nth 3 1)
              (("2" (assert)
                (("2" (expand bubbling 3)
                  (("2" (case "NOT  car(x!1) > car(cdr(x!1))")
                    (("1" (assert)
                      (("1" (inst? -2)
                        (("1" (inst -2 "i -1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst 4 " j + 1")
                                (("1"
                                  (expand nth 4 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 5 2)
                          (("2" (grind)
                            (("2" (expand length -1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "i = 1")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand nth 3 1)
                              (("1"
                                (inst 3 0)
                                (("1"
                                  (expand nth 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -3)
                          (("1" (inst -3 "i - 1")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand nth -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand nth 4 1)
                                      (("1"
                                        (inst 4 " j + 1")
                                        (("1"
                                          (expand nth 4 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 5)
                            (("2" (grind)
                              (("2"
                                (expand length -1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand length -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -2 4)
                      (("3" (grind)
                        (("3" (expand length -1)
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (hide -2 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (rewrite bubbling_preserves_length)
        (("2" (skeep)
          (("2" (typepred j y!1 y!2 x!2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide -2 2)
      (("3" (skeep)
        (("3" (typepred i!1 y!1 y!2 x!2) (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite bubbling_preserves_length)
          (("4" (typepred j y!1 y!2 x!2) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred i y!1 y!2 x!2) (("5" (grind) nil nil)) nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (rewrite bubbling_preserves_length)
          (("6" (typepred j1 "x!1`1")
            (("6" (typepred "x!1`2") (("6" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide -2 3)
      (("7" (rewrite bubbling_preserves_length)
        (("7" (skeep)
          (("7" (typepred j "y!1`1" "y!1`2" "x!1`2")
            (("7" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (hide -2 3)
      (("8" (skeep)
        (("8" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (typepred i1 "x!1`1")
          (("9" (typepred "x!1`2") (("9" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("10" (hide -2 3)
      (("10" (skeep)
        (("10" (rewrite bubbling_preserves_length)
          (("10" (typepred j "x!1`2" "y!1`1" "y!1`2")
            (("10" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("11" (hide -2 3)
      (("11" (skeep)
        (("11" (typepred i!1 "x!1`2" "y!1`1" "y!1`2")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (skeep)
        (("12" (rewrite bubbling_preserves_length)
          (("12" (typepred j "x!1`2" "y!1`1" "y!1`2")
            (("12" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (skeep)
        (("13" (typepred i "x!1`2" "y!1`1" "y!1`2")
          (("13" (grind) nil nil)) nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (rewrite bubbling_preserves_length)
        (("14" (typepred j!1 l!1)
          (("14" (typepred n!1) (("14" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (typepred i!1 l!1)
        (("15" (typepred n!1) (("15" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[nat]" bubblesort nil)
    (x!2 skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubbling_bubbles_TCC1 0
  (bubbling_bubbles_TCC1-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (rewrite bubbling_preserves_length) (("" (grind) nil nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_bubbles_TCC2 0
  (bubbling_bubbles_TCC2-1 nil 3638806625
   ("" (subtype-tcc) (("" (rewrite bubbling_preserves_length) nil nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubbling_bubbles 0
  (bubbling_bubbles-1 nil 3639078119
   ("" (measure-induct+ "n" (l n))
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
     ("11" (postpone) nil nil) ("12" (postpone) nil nil)
     ("13" (postpone) nil nil) ("14" (postpone) nil nil)
     ("15" (postpone) nil nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil
    (bubbling_preserves_prefix formula-decl nil bubblesort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_preserves_suffix_TCC1 0
  (bubblesort_aux_preserves_suffix_TCC1-1 nil 3639014491
   ("" (subtype-tcc)
    (("" (rewrite bubblesort_aux_preserves_length) nil nil)) nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubblesort_aux_preserves_suffix_TCC2 0
  (bubblesort_aux_preserves_suffix_TCC2-1 nil 3639014491
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bubblesort_aux_preserves_suffix 0
  (bubblesort_aux_preserves_suffix-1 nil 3639077936
   ("" (measure-induct+ n ("l" "n"))
    (("1" (skeep)
      (("1" (expand bubblesort_aux 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (inst -1 "bubbling(x!1, x!2)" "x!2 - 1")
              (("1" (inst?)
                (("1" (prop)
                  (("1" (lemma bubbling_preserves_suffix)
                    (("1" (inst -1 x!1 x!2)
                      (("1" (assert)
                        (("1" (inst? -1)
                          (("1" (prop) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (lemma bubbling_preserves_length)
                    (("2" (inst?)
                      (("2" (typepred i x!1 x!2)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -3 2)
      (("2" (typepred i!1 y!1 y!2 x!2 i!1) (("2" (grind) nil nil))
        nil))
      nil)
     ("3" (hide -3 2)
      (("3" (rewrite bubblesort_aux_preserves_length)
        (("3" (typepred i!1 y!1 y!2 x!2 i!1) (("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (typepred i y!1 y!2 x!2) (("4" (grind) nil nil)) nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (rewrite bubblesort_aux_preserves_length)
          (("5" (typepred i y!1 y!2 x!2) (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (typepred i1 "x!1`1" "x!1`2") (("6" (grind) nil nil))
          nil))
        nil))
      nil)
     ("7" (hide -3 2 3)
      (("7" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("7" (grind) nil nil)) nil))
      nil)
     ("8" (hide 2 3 -3)
      (("8" (rewrite bubblesort_aux_preserves_length)
        (("8" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (rewrite bubblesort_aux_preserves_length)
          (("9" (typepred i1 "x!1`1" "x!1`2") (("9" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide 2 3 -3)
      (("10" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("10" (grind) nil nil)) nil))
      nil)
     ("11" (hide 2 3 -3)
      (("11" (rewrite bubblesort_aux_preserves_length)
        (("11" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (skeep)
        (("12" (typepred i "y!1`1" "y!1`2" "x!1`2")
          (("12" (grind) nil nil)) nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (skeep)
        (("13" (rewrite bubblesort_aux_preserves_length)
          (("13" (typepred i "y!1`1" "y!1`2" "x!1`2")
            (("13" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (skeep)
        (("14" (typepred i l!1 n!1) (("14" (grind) nil nil)) nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (skeep)
        (("15" (typepred i l!1 l1!1 n!1)
          (("15" (grind)
            (("15" (rewrite bubblesort_aux_preserves_length) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[nat]" bubblesort nil)
    (x!2 skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preserves_suffix formula-decl nil bubblesort nil)
    (i skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil)
    (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_is_permutation 0
  (bubblesort_aux_is_permutation-1 nil 3639009901
   ("" (measure-induct+ "n" ("l" "n"))
    (("" (expand bubblesort_aux 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -) (("1" (grind) nil nil)) nil)
           ("2" (lemma "permutations_is_transitive")
            (("2"
              (inst -1 x!1 "bubbling(x!1, x!2)"
               "bubblesort_aux(bubbling(x!1, x!2), x!2 - 1)")
              (("1" (prop)
                (("1" (rewrite bubbling_preseves_contents) nil nil)
                 ("2" (inst? -1)
                  (("1" (prop) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[nat]" bubblesort nil)
    (x!2 skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preseves_contents formula-decl nil bubblesort nil)
    (permutations_is_transitive formula-decl nil sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil)
    (permutations const-decl "bool" sorting nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_preserves_prefix_TCC1 0
  (bubblesort_aux_preserves_prefix_TCC1-1 nil 3639079535
   ("" (subtype-tcc)
    (("" (rewrite bubblesort_aux_preserves_length)
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubblesort_aux_preserves_prefix_TCC2 0
  (bubblesort_aux_preserves_prefix_TCC2-1 nil 3639079535
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   nil))
 (bubblesort_aux_preserves_prefix 0
  (bubblesort_aux_preserves_prefix-1 nil 3639209466
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((bubblesort_aux_preserves_suffix formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil) nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prefix def-decl "list[nat]" sorting nil)
    (suffix def-decl "list[nat]" sorting nil)
    (app_prefix_suffix formula-decl nil sorting nil)
    (permutations_is_ext_reflexive formula-decl nil sorting nil)
    (contents_suffix formula-decl nil sorting nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (permutations const-decl "bool" sorting nil)
    (bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_suffix formula-decl nil sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permutations_is_commutative formula-decl nil sorting nil) nil
    (length_prefix formula-decl nil sorting nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (contents_prefix formula-decl nil sorting nil)
    (length def-decl "nat" list_props nil) nil
    (permutations_preserve_contents formula-decl nil sorting nil)
    (permutations_of_app_pref formula-decl nil sorting nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (bubblesort_is_permutation 0
  (bubblesort_is_permutation-1 nil 3639009162
   ("" (skeep)
    (("" (expand bubblesort)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (rewrite "bubblesort_aux_is_permutation")
            (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort const-decl "list[nat]" bubblesort nil)
    (permutations const-decl "bool" sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bubblesort_aux_sorts_prefix_TCC1 0
  (bubblesort_aux_sorts_prefix_TCC1-1 nil 3639011941
   ("" (subtype-tcc)
    (("" (rewrite bubblesort_aux_preserves_length)
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubblesort_aux_sorts_prefix_TCC2 0
  (bubblesort_aux_sorts_prefix_TCC2-1 nil 3639011941
   ("" (subtype-tcc)
    (("" (rewrite bubblesort_aux_preserves_length)
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (bubblesort_aux_sorts_prefix 0
  (bubblesort_aux_sorts_prefix-1 nil 3639013577
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (expand bubblesort_aux 1)
        (("1" (inst -1 "bubbling(x!1, x!2)" "x!2 - 1" "i")
          (("1" (assert) nil nil)
           ("2" (typepred i)
            (("2" (typepred x!2)
              (("2" (case "i = x!2 - 1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (lemma bubblesort_aux_preserves_suffix)
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (inst -1 "x!2")
                            (("1" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma bubbling_bubbles)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           bubblesort_aux_preserves_prefix)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst? -2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (typepred j)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (lemma bubbling_preseves_contents)
                              (("2"
                                (inst?)
                                (("2"
                                  (expand permutations)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (hide -2 3)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (typepred i!1 y!2 x!2 y!1)
        (("2" (lemma bubblesort_aux_is_permutation)
          (("2" (inst?)
            (("2" (expand permutations)
              (("2" (prop)
                (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide -2 2)
      (("3" (typepred i!1 y!2 x!2 y!1)
        (("3" (lemma bubblesort_aux_is_permutation)
          (("3" (inst?)
            (("3" (expand permutations)
              (("3" (prop)
                (("3" (hide -2) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (typepred i y!1 y!2 x!2)
          (("4" (lemma bubblesort_aux_is_permutation)
            (("4" (inst?)
              (("4" (expand permutations)
                (("4" (prop)
                  (("4" (hide -2) (("4" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred i y!1 y!2 x!2)
          (("5" (lemma bubblesort_aux_is_permutation)
            (("5" (inst?)
              (("5" (expand permutations)
                (("5" (prop)
                  (("5" (hide -2) (("5" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (hide -)
        (("6" (skeep)
          (("6" (typepred i1 "x!1`1" "x!1`2")
            (("6" (lemma bubblesort_aux_is_permutation)
              (("6" (inst?)
                (("6" (expand permutations)
                  (("6" (prop)
                    (("6" (hide -2) (("6" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2 3 -2)
      (("7" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("7" (lemma bubblesort_aux_is_permutation)
          (("7" (inst?)
            (("7" (expand permutations)
              (("7" (prop)
                (("7" (hide -2) (("7" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (hide -2 2 3)
      (("8" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("8" (lemma bubblesort_aux_is_permutation)
          (("8" (inst?)
            (("8" (expand permutations)
              (("8" (prop)
                (("8" (hide -2) (("8" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (typepred i1 "x!1`1" "x!1`2")
          (("9" (lemma bubblesort_aux_is_permutation)
            (("9" (inst?)
              (("9" (expand permutations)
                (("9" (prop)
                  (("9" (hide -2) (("9" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide -2 2 3)
      (("10" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("10" (lemma bubblesort_aux_is_permutation)
          (("10" (inst?)
            (("10" (expand permutations)
              (("10" (prop)
                (("10" (hide -2) (("10" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide -2 2 3)
      (("11" (typepred i!1 "y!1`1" "y!1`2" "x!1`2")
        (("11" (lemma bubblesort_aux_is_permutation)
          (("11" (inst?)
            (("11" (expand permutations)
              (("11" (prop)
                (("11" (hide -2) (("11" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (skeep)
        (("12" (typepred i "y!1`1" "y!1`2" "x!1`2")
          (("12" (lemma bubblesort_aux_is_permutation)
            (("12" (inst?)
              (("12" (expand permutations)
                (("12" (prop)
                  (("12" (hide -2) (("12" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (skeep)
        (("13" (typepred i "y!1`1" "y!1`2" "x!1`2")
          (("13" (lemma bubblesort_aux_is_permutation)
            (("13" (inst?)
              (("13" (expand permutations)
                (("13" (prop)
                  (("13" (hide -2) (("13" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (typepred i!1 l!1 n!1)
        (("14" (lemma bubblesort_aux_is_permutation)
          (("14" (inst?)
            (("14" (expand permutations)
              (("14" (prop)
                (("14" (hide -2) (("14" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (typepred i!1 l!1 n!1)
        (("15" (lemma bubblesort_aux_is_permutation)
          (("15" (inst?)
            (("15" (expand permutations)
              (("15" (prop)
                (("15" (hide -2) (("15" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below[x!2]" bubblesort nil)
    (x!2 skolem-const-decl "below[list2finseq(x!1)`length]" bubblesort
     nil)
    (x!1 skolem-const-decl "list[nat]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bubblesort_aux_preserves_suffix formula-decl nil bubblesort nil)
    (bubbling_preseves_contents formula-decl nil bubblesort nil)
    (permutations const-decl "bool" sorting nil)
    (bubblesort_aux_preserves_prefix formula-decl nil bubblesort nil)
    (bubbling_bubbles formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_is_sorted 0
  (bubblesort_is_sorted-1 nil 3639011943
   ("" (skeep)
    (("" (expand bubblesort)
      (("" (prop)
        (("1" (grind) nil nil)
         ("2" (lemma bubblesort_aux_sorts_prefix)
          (("2" (inst? -1)
            (("1" (expand is_sorted?)
              (("1" (skeep)
                (("1" (inst -1 k)
                  (("1" (assert) nil nil)
                   ("2" (hide 3)
                    (("2" (lemma bubblesort_aux_is_permutation)
                      (("2" (inst?)
                        (("1" (expand permutations)
                          (("1" (prop)
                            (("1" (hide -2)
                              (("1"
                                (replace -1 -2 rl)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort const-decl "list[nat]" bubblesort nil)
    (bubblesort_aux_sorts_prefix formula-decl nil bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubblesort_aux def-decl "list[nat]" bubblesort nil)
    (k skolem-const-decl
     "below[list2finseq(bubblesort_aux(l, list2finseq(l)`length - 1))`length]"
     bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (permutations const-decl "bool" sorting nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (< const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (l skolem-const-decl "list[nat]" bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_sorted? const-decl "bool" sorting nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (bubblesort_works 0
  (bubblesort_works-1 nil 3639009015
   ("" (skeep)
    (("" (rewrite bubblesort_is_permutation)
      (("" (rewrite bubblesort_is_sorted) nil nil)) nil))
    nil)
   ((bubblesort_is_permutation formula-decl nil bubblesort nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bubblesort_is_sorted formula-decl nil bubblesort nil))
   shostak)))

